#   entree
#1			2
#
#3			4
import time
import tinytuya
import random
import RPi.GPIO as GPIO


import paho.mqtt.client as mqtt
import time

"""
multi.py, uses the sounddevice library to play multiple audio files to multiple output devices at the same time
Written by Devon Bray (dev@esologic.com)
"""
 
import sounddevice
import soundfile
import threading
import os
 
import multiprocessing
 
DATA_TYPE = "float32"

# Don't forget to change the variables for the MQTT broker!
mqtt_topic = "ip"
mqtt_broker_ip = "192.168.0.154"

client = mqtt.Client()

# These functions handle what happens when the MQTT client connects
# to the broker, and what happens then the topic receives a message
def on_connect(client, userdata, flags, rc):
    # rc is the error code returned when connecting to the broker
    print ("Connected!", str(rc))
    
    # Once the client has connected to the broker, subscribe to the topic
    client.subscribe(mqtt_topic)
    
def on_message(client, userdata, msg):
    # This function is called everytime the topic is published to.
    # If you want to check each message, and do something depending on
    # the content, the code to do this should be run in this function
    
    print ("Topic: ", msg.topic + "\nMessage: " + str(msg.payload))
    time.sleep(1)
    client.publish("morse","bien recu")
    
    # The message itself is stored in the msg variable
    # and details about who sent it are stored in userdata

# Here, we are telling the client which functions are to be run
# on connecting, and on receiving a message
client.on_connect = on_connect
client.on_message = on_message

# Once everything has been set up, we can (finally) connect to the broker
# 1883 is the listener port that the MQTT broker is using
client.connect(mqtt_broker_ip, 1883)

# Once we have told the client to connect, let the client object run itself
client.loop_start()
GPIO.setmode(GPIO.BCM) # GPIO Numbers instead of board numbers
 
RELAIS_1_GPIO = 5
GPIO.setup(RELAIS_1_GPIO, GPIO.OUT) # GPIO Assign mode

RELAIS_2_GPIO = 6
GPIO.setup(RELAIS_2_GPIO, GPIO.OUT) # GPIO Assign mode

BTN1 = 13 
BTN2 = 16 
BTN3 = 19
BTN4 = 20
BTN5 = 21
BTN6 = 26
BTN11 = 17
BTN12 = 27

GPIO.setup(BTN1, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN2, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN3, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN4, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN5, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN6, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN11, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(BTN12, GPIO.IN, pull_up_down=GPIO.PUD_UP)

        

#d = tinytuya.BulbDevice('DEVICE_ID_HERE', 'IP_ADDRESS_HERE', 'LOCAL_KEY_HERE')
d = tinytuya.BulbDevice('bf11153af43a478a0fvper', '192.168.0.153', 'c7d6da317b1f8541')
d2 = tinytuya.BulbDevice('bf2386bd19edc2ffddqsns', '192.168.0.150', 'd30ebb172efe1e34')
d3 = tinytuya.BulbDevice('bf5b834d20fc518927mnns', '192.168.0.151', '76e2c6c8b660f54d')
d4 = tinytuya.BulbDevice('bf6238d572c41f8b8flg4p', '192.168.0.152', '0f6f8050bdb38d92')
d5 = tinytuya.BulbDevice('bf523b914e77f180f1bmkt', '192.168.0.155', '07b36c816d76f0cd')
d6 = tinytuya.BulbDevice('bf2e5129ed02cf8383j39p', '192.168.0.156', '7d8e3bcbe2879774')
d7 = tinytuya.BulbDevice('bf667ae5e9f862276am8d0', '192.168.0.157', '8bf8d86b5ee082a3')
c1 = tinytuya.BulbDevice('bfad13b76281e11e261uv9', '192.168.0.158', 'ef70da944131efe7')
c2 = tinytuya.BulbDevice('bf77386f05738126c5wpct', '192.168.0.159', 'a44a18964af1ec08')
d.set_version(3.4)
d.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d.set_socketNODELAY(True) 
d2.set_version(3.4)
d2.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d2.set_socketNODELAY(True) 
d3.set_version(3.4)
d3.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d3.set_socketNODELAY(True) 
d4.set_version(3.4)
d4.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d4.set_socketNODELAY(True) 
d5.set_version(3.4)
d5.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d5.set_socketNODELAY(True) 
d6.set_version(3.4)
d6.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d6.set_socketNODELAY(True) 
d7.set_version(3.4)
d7.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
d7.set_socketNODELAY(True) 
c1.set_version(3.4)
c1.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
c1.set_socketNODELAY(True) 
c2.set_version(3.4)
c2.set_socketPersistent(True)  # Optional: Keep socket open for multiple commands
c2.set_socketNODELAY(True) 
#data = d.status()

bulbs = [c1,c2,d,d2, d3,d4, d5,d6,d7]

# Show status of first controlled switch on device
#print('Dictionary %r' % data)

# Set to RED Color - set_colour(r, g, b):
"""
d.set_colour(255,0,0)
d2.set_colour(255,0,0)
d3.set_colour(255,0,0)
d4.set_colour(255,0,0) 
""" 
"""
# Cycle through the Rainbow
rainbow = {"red": [255, 0, 0], "orange": [255, 127, 0], "yellow": [255, 200, 0],
          "green": [0, 255, 0], "blue": [0, 0, 255], "indigo": [46, 43, 95],
          "violet": [139, 0, 255]}
for color in rainbow:
    [r, g, b] = rainbow[color]
    d.set_colour(r, g, b, nowait=True)  # nowait = Go fast don't wait for response
    d2.set_colour(r, g, b, nowait=True)  # nowait = Go fast don't wait for response
    d3.set_colour(r, g, b, nowait=True)  # nowait = Go fast don't wait for response
    d4.set_colour(r, g, b, nowait=True)  # nowait = Go fast don't wait for response
    time.sleep(1)

"""

# Brightness: Type A devices range = 25-255 and Type B = 10-1000
#d.set_brightness(1000)
"""
d.set_colour(0,0,255)
d2.set_colour(0,0,255)
d3.set_colour(0,0,255)
d4.set_colour(0,0,255)  
"""
"""

for x in range(10) :
	d.set_brightness(10)
	d2.set_brightness(10)
	d3.set_brightness(10)
	d4.set_brightness(10)
	time.sleep(0.25)
	d.set_brightness(1000)
	d2.set_brightness(1000)
	d3.set_brightness(1000)
	d4.set_brightness(1000)
	time.sleep(0.25)
"""
# Set to White - set_white(brightness, colourtemp):
#    colourtemp: Type A devices range = 0-255 and Type B = 0-1000
#d.set_white(1000,10)

# Set Bulb to Scene Mode
#d.set_mode('scene')

# Scene Example: Set Color Rotation Scene
#d.set_value(25, '07464602000003e803e800000000464602007803e803e80000000046460200f003e803e800000000464602003d03e803e80000000046460200ae03e803e800000000464602011303e803e800000000')

#time.sleep(50)

  
  
def setAllColor(r,g,b):
	for x in bulbs :
		x.set_colour(r,g,b, nowait=False)
#	for x in bulbs :
#		x.turn_on(nowait=False)

import threading

def allOff():
	for x in bulbs:
		#x.set_colour(0,0,0, nowait=True)
		#x.turn_off(nowait=False)
		t1 = threading.Thread(target=x.turn_off)#, args=('nowait=False',))
		t1.start()
		t1.join(0.1)
		#x.set_brightness(10)
def allOn():
	for x in bulbs:
		#x.set_colour(0,0,0, nowait=True)
		t1 = threading.Thread(target=x.turn_on)#, args=('nowait=False',))
		t1.start()
		t1.join(0.1)
		
		#x.set_brightness(10)
	
def allOn_white():
	for x in bulbs:
		x.set_white(1000, 0, nowait=False)
	for x in bulbs:
		x.turn_on(nowait=False)


#tour 1 3 2 4
def tour():
	allOff()
	d.set_white(1000, 0, nowait=True)
	time.sleep(0.25)
	allOff()
	d3.set_white(1000, 0, nowait=True)
	time.sleep(0.25)
	allOff()
	d2.set_white(1000, 0, nowait=True)
	time.sleep(0.25)
	allOff()
	d4.set_white(1000, 0, nowait=True)
	time.sleep(0.25)
	allOff()
	
def noirOrouge():
	allOff()
	GPIO.output(RELAIS_1_GPIO, GPIO.LOW) # out
	time.sleep(0.25)
	GPIO.output(RELAIS_1_GPIO, GPIO.HIGH) # on
	setAllColor(0,0,0);
	for x in range(25):
		setAllColor(x*10,0,0)
		time.sleep(0.1)

def randLight():
	allOff()
	b = random.choice(bulbs)
	b.set_white(1000, 0, nowait=True)
	#print(b)
	#b.set_colour(255,0,0, nowait=True) 
	time.sleep(0.1)
	allOff()
	
def seq3():
	allOff()
	time.sleep(0.1)
	c1.set_white(10,0)
	c1.turn_on(nowait=False)
	time.sleep(0.1)
	c1.turn_off(nowait=False)
	time.sleep(0.1)
	c1.set_white(100,0)
	c1.turn_on(nowait=False)
	time.sleep(0.1)
	c1.set_white(50,0)
	time.sleep(0.1)
	c1.turn_off(nowait=False)
	time.sleep(0.1)
	c1.set_white(50,0)
	c1.turn_on(nowait=False)
	time.sleep(0.1)
	c1.turn_off(nowait=False)
	time.sleep(0.1)
	
def seq2():
	allOff()
	time.sleep(0.5)
	d4.set_white(100,0)
	d4.turn_on(nowait=False)
	time.sleep(0.1)
	d4.turn_off(nowait=False)
	time.sleep(0.1)
	d4.set_white(500,0)
	d4.turn_on(nowait=False)
	time.sleep(0.1)
	d4.set_white(1000,0)
	time.sleep(0.1)
	d4.turn_off(nowait=False)
	time.sleep(0.1)
			

#test tour

def seq5():
	allOff()
	time.sleep(0.5)
	setAllColor(255,0,0)
	time.sleep(0.1)
	allOn()
	time.sleep(0.5)
	GPIO.output(RELAIS_1_GPIO, GPIO.HIGH) # out
	time.sleep(0.5)
	GPIO.output(RELAIS_1_GPIO, GPIO.LOW) # on
	allOff()
	time.sleep(0.25)
	allOn()
	time.sleep(0.5)
	GPIO.output(RELAIS_2_GPIO, GPIO.HIGH) # out
	time.sleep(0.5)
	GPIO.output(RELAIS_2_GPIO, GPIO.LOW) # on
	allOff()
	time.sleep(0.5)
	allOn()
	time.sleep(0.5)
	allOff()
	time.sleep(1)

'''
allOn_white()
time.sleep(1)
'''

'''
time.sleep(3)
seq2()
'''

def load_sound_file_into_memory(path):
    """
    Get the in-memory version of a given path to a wav file
    :param path: wav file to be loaded
    :return: audio_data, a 2D numpy array
    """
 
    audio_data, _ = soundfile.read(path, dtype=DATA_TYPE)
    return audio_data
 
 
def get_device_number_if_usb_soundcard(index_info):
    """
    Given a device dict, return True if the device is one of our USB sound cards and False if otherwise
    :param index_info: a device info dict from PyAudio.
    :return: True if usb sound card, False if otherwise
    """
 
    index, info = index_info
 
    if "USB Audio Device" in info["name"]:
        return index
    return False
 
 
def play_wav_on_index(audio_data, stream_object):
    """
    Play an audio file given as the result of `load_sound_file_into_memory`
    :param audio_data: A two-dimensional NumPy array
    :param stream_object: a sounddevice.OutputStream object that will immediately start playing any data written to it.
    :return: None, returns when the data has all been consumed
    """
 
    stream_object.write(audio_data)
 
 
def create_running_output_stream(index):
    """
    Create an sounddevice.OutputStream that writes to the device specified by index that is ready to be written to.
    You can immediately call `write` on this object with data and it will play on the device.
    :param index: the device index of the audio device to write to
    :return: a started sounddevice.OutputStream object ready to be written to
    """
 
    output = sounddevice.OutputStream(
        device=index,
        dtype=DATA_TYPE
    )
    output.start()
    return output
    
def good_filepath(path):
	"""
	Macro for returning false if the file is not a non-hidden wav file
	:param path: path to the file
	:return: true if a non-hidden wav, false if not a wav or hidden
	"""
	return str(path).endswith(".wav") and (not str(path).startswith("."))


def b1(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("1111")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4')
        client.publish("sb","a")
        p = multiprocessing.Process(target=play_wav_on_index, args=(files[0], streams[0],))
        p1 = multiprocessing.Process(target=play_wav_on_index, args=(files[1], streams[2],))
        p2 = multiprocessing.Process(target=play_wav_on_index, args=(files[2], streams[3],))
        p.start()
        p1.start()
        p2.start()
		#p3.start()
		#p4.start()
def b2(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("222222")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4')
        client.publish("sb","b")
        p = multiprocessing.Process(target=play_wav_on_index, args=(files[3], streams[0],))
        p1 = multiprocessing.Process(target=play_wav_on_index, args=(files[4], streams[1],))
        p2 = multiprocessing.Process(target=play_wav_on_index, args=(files[5], streams[2],))
        p3 = multiprocessing.Process(target=play_wav_on_index, args=(files[6], streams[3],))
        p4 = multiprocessing.Process(target=play_wav_on_index, args=(files[7], streams[4],))
        p.start()
        p1.start()
        p2.start()
        p3.start()
        p4.start()

        seq2()
def b3(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("33333")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4')
        client.publish("sb","c")
        p = multiprocessing.Process(target=play_wav_on_index, args=(files[8], streams[0],))
        p1 = multiprocessing.Process(target=play_wav_on_index, args=(files[9], streams[1],))
        p2 = multiprocessing.Process(target=play_wav_on_index, args=(files[10], streams[2],))
        p3 = multiprocessing.Process(target=play_wav_on_index, args=(files[11], streams[3],))
        p4 = multiprocessing.Process(target=play_wav_on_index, args=(files[12], streams[4],))
        p.start()
        p1.start()
        p2.start()
        p3.start()
        p4.start()
        seq3()
def b4(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("444444444")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4')
        client.publish("sb","d")
        p = multiprocessing.Process(target=play_wav_on_index, args=(files[13], streams[0],))
        p1 = multiprocessing.Process(target=play_wav_on_index, args=(files[14], streams[1],))
        p2 = multiprocessing.Process(target=play_wav_on_index, args=(files[15], streams[2],))
        p3 = multiprocessing.Process(target=play_wav_on_index, args=(files[16], streams[3],))
        p4 = multiprocessing.Process(target=play_wav_on_index, args=(files[17], streams[4],))
        p.start()
        p1.start()
        p2.start()
        p3.start()
        p4.start()
def b5(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("5555")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4')
        client.publish("sb","e")
        p = multiprocessing.Process(target=play_wav_on_index, args=(files[18], streams[0],))
        p1 = multiprocessing.Process(target=play_wav_on_index, args=(files[19], streams[1],))
        p2 = multiprocessing.Process(target=play_wav_on_index, args=(files[20], streams[2],))
        p3 = multiprocessing.Process(target=play_wav_on_index, args=(files[21], streams[3],))
        p4 = multiprocessing.Process(target=play_wav_on_index, args=(files[22], streams[4],))
        p.start()
        p1.start()
        p2.start()
        p3.start()
        p4.start()
        seq5()
def b6(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("666666")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4')
        client.publish("sb","f")
        p = multiprocessing.Process(target=play_wav_on_index, args=(files[23], streams[0],))
        p1 = multiprocessing.Process(target=play_wav_on_index, args=(files[24], streams[1],))
        p2 = multiprocessing.Process(target=play_wav_on_index, args=(files[25], streams[2],))
        p3 = multiprocessing.Process(target=play_wav_on_index, args=(files[26], streams[3],))
        p4 = multiprocessing.Process(target=play_wav_on_index, args=(files[27], streams[4],))
        p.start()
        p1.start()
        p2.start()
        p3.start()
        p4.start()
        
def b11(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("11 11 11 11 11")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4') 
        allOn_white()
  
def b12(channel):
    if GPIO.input(channel) == GPIO.LOW:
        global p, p1, p2, p3, p4
        print("12 12 12 12")
        try:
            p.terminate()
        except:
            print('Error p')
        try:
            p1.terminate()
        except:
            print('Error p1')
        try:
            p2.terminate()
        except:
            print('Error p2')
        try:
            p3.terminate()
        except:
            print('Error p3')
        try:
            p4.terminate()
        except:
            print('Error p4') 
        allOff()
                     
GPIO.add_event_detect(BTN1, GPIO.BOTH, callback=b1)
GPIO.add_event_detect(BTN2, GPIO.BOTH, callback=b2)
GPIO.add_event_detect(BTN3, GPIO.BOTH, callback=b3)
GPIO.add_event_detect(BTN4, GPIO.BOTH, callback=b4)
GPIO.add_event_detect(BTN5, GPIO.BOTH, callback=b5)
GPIO.add_event_detect(BTN6, GPIO.BOTH, callback=b6)
GPIO.add_event_detect(BTN11, GPIO.BOTH, callback=b11)
GPIO.add_event_detect(BTN12, GPIO.BOTH, callback=b12)

allOn_white()
time.sleep(1)
#allOff()
print("ready")
'''
seq5()
'''

cwd = os.getcwd()
sound_file_paths = [os.path.join(cwd, path) for path in sorted(filter(lambda path: good_filepath(path), os.listdir(cwd)))]

print("Discovered the following .wav files:", sound_file_paths)

files = [load_sound_file_into_memory(path) for path in sound_file_paths]

print("Files loaded into memory, Looking for USB devices.")

print(sounddevice.query_devices())

usb_sound_card_indices = list(filter(lambda x: x is not False,
									 map(get_device_number_if_usb_soundcard,
										 [index_info for index_info in enumerate(sounddevice.query_devices())])))

print("Discovered the following usb sound devices", usb_sound_card_indices)

streams = [create_running_output_stream(index) for index in usb_sound_card_indices]

running = True

if not len(streams) > 0:
	running = False
	print("No audio devices found, stopping")

if not len(files) > 0:
	running = False
	print("No sound files found, stopping")
"""
while running:

	print("Playing files")

	threads = [threading.Thread(target=play_wav_on_index, args=[file_path, stream])
			   for file_path, stream in zip(files, streams)]

	try:

		for thread in threads:
			thread.start()

		for thread, device_index in zip(threads, usb_sound_card_indices):
			print("Waiting for device", device_index, "to finish")
			thread.join()

	except KeyboardInterrupt:
		running = False
		print("Stopping stream")
		for stream in streams:
			stream.abort(ignore_errors=True)
			stream.close()
		print("Streams stopped")

print("Bye.")
"""
"""
play_wav_on_index(files[0], streams[0])
play_wav_on_index(files[1], streams[1])
play_wav_on_index(files[2], streams[2])
play_wav_on_index(files[3], streams[3])
play_wav_on_index(files[4], streams[4])
"""
while(True):
	# do any other processing, while waiting for the edge detection
    time.sleep(0.1) # sleep 1 sec
